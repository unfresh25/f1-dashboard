[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "",
    "text": "Introducción\nLa Fórmula 1, reconocida como la máxima expresión del automovilismo deportivo, constituye un fascinante universo donde convergen la tecnología y la destreza de los pilotos para brindar un espectáculo emocionante en circuitos de todo el mundo (consultar en ABC 2020). Cada temporada de Fórmula 1 se erige como un emocionante periplo repleto de una competencia feroz, innovación tecnológica y cambiantes clasificaciones de pilotos y equipos. Este apasionante deporte atrae no solo a fervientes aficionados del automovilismo, sino también a estadísticos y científicos de datos que buscan desentrañar los secretos detrás de cada carrera.\nEn el epicentro de la Fórmula 1 yace un vasto tesoro de datos que abarca décadas de competiciones, equipos, pilotos y circuitos. Gracias a los avances tecnológicos y a la meticulosa recopilación de datos, los aficionados y expertos en análisis de datos pueden sumergirse en una exploración profunda de este deporte de alto rendimiento (Amo Lledo 2020). En este proyecto, llevaremos a cabo un análisis exploratorio y predictivo de los datos extraídos de Ergast API recopilados por Vopani. Sin embargo, en este artículo nos centraremos exclusivamente en el análisis exploratorio de los datos para comprender su naturaleza, estructura, distribución y otros aspectos relevantes.\n\n\n\n\n\nReferencias\n\nABC. 2020. «Historia de la Formula 1». ABC.es. https://www.abc.es/deportes/formula-1/abci-historia-formula-1-202007141357_reportaje.html.\n\n\nAmo Lledo, A. 2020. «Análisis de la eficiencia aplicado a la Fórmula 1», 83. https://idus.us.es/bitstream/handle/11441/101320/TFG-2847-AMO%20LLEDO.pdf.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "drivers.html",
    "href": "drivers.html",
    "title": "Drivers",
    "section": "",
    "text": "About this site",
    "crumbs": [
      "Exploratory Data Analysis (EDA)",
      "Drivers"
    ]
  },
  {
    "objectID": "circuits.html",
    "href": "circuits.html",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "",
    "text": "En esta sección, llevaremos a cabo un análisis exploratorio centrado en la tabla races, que abarca los datos de las carreras disputadas desde 1950 hasta 2023. Sin embargo, para llevar a cabo este análisis de manera integral, necesitamos consolidar información proveniente de diversas fuentes. Utilizaremos consultas para unificar los datos de la tabla races con aquellos de las tablas circuits (que contiene información sobre los circuitos donde se celebran las carreras de Fórmula 1), results (que proporciona los resultados de las carreras), drivers (que enumera los pilotos que participaron en las carreras), constructors (los equipos que compitieron en las carreras), lap_times (los tiempos registrados por vuelta) y pit_stops (las paradas realizadas en boxes).\nEs fundamental destacar que, para las tablas results, drivers y constructors, nos enfocaremos exclusivamente en los datos del ganador de cada carrera. Asimismo, de las tablas lap_times y pit_stops, extraeremos únicamente la información correspondiente a la vuelta más rápida registrada y a la parada en boxes más rápida realizada, respectivamente.",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla circuits"
    ]
  },
  {
    "objectID": "constructors.html",
    "href": "constructors.html",
    "title": "Constructors",
    "section": "",
    "text": "About this site",
    "crumbs": [
      "Exploratory Data Analysis (EDA)",
      "Constructors"
    ]
  },
  {
    "objectID": "circuits.html#tabla-races",
    "href": "circuits.html#tabla-races",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla races",
    "text": "Tabla races\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM races\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\nraceid\nyear\nround\ncircuitid\nname\ndate\ntime\nurl\nfp1_date\nfp1_time\nfp2_date\nfp2_time\nfp3_date\nfp3_time\nquali_date\nquali_time\nsprint_date\nsprint_time\n\n\n\n\n0\n1\n2009\n1\n1\nAustralian Grand Prix\n2009-03-29\n06:00:00\nhttp://en.wikipedia.org/wiki/2009_Australian_G...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n1\n2\n2009\n2\n2\nMalaysian Grand Prix\n2009-04-05\n09:00:00\nhttp://en.wikipedia.org/wiki/2009_Malaysian_Gr...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n2\n3\n2009\n3\n17\nChinese Grand Prix\n2009-04-19\n07:00:00\nhttp://en.wikipedia.org/wiki/2009_Chinese_Gran...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n3\n4\n2009\n4\n3\nBahrain Grand Prix\n2009-04-26\n12:00:00\nhttp://en.wikipedia.org/wiki/2009_Bahrain_Gran...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n4\n5\n2009\n5\n4\nSpanish Grand Prix\n2009-05-10\n12:00:00\nhttp://en.wikipedia.org/wiki/2009_Spanish_Gran...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla circuits"
    ]
  },
  {
    "objectID": "circuits.html#tabla-circuits",
    "href": "circuits.html#tabla-circuits",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla circuits",
    "text": "Tabla circuits\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM circuits\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\ncircuitid\ncircuitref\nname\nlocation\ncountry\nlat\nlng\nalt\nurl\n\n\n\n\n0\n1\nalbert_park\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n10\nhttp://en.wikipedia.org/wiki/Melbourne_Grand_P...\n\n\n1\n2\nsepang\nSepang International Circuit\nKuala Lumpur\nMalaysia\n2.76083\n101.738\n18\nhttp://en.wikipedia.org/wiki/Sepang_Internatio...\n\n\n2\n3\nbahrain\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n7\nhttp://en.wikipedia.org/wiki/Bahrain_Internati...\n\n\n3\n4\ncatalunya\nCircuit de Barcelona-Catalunya\nMontmeló\nSpain\n41.57\n2.26111\n109\nhttp://en.wikipedia.org/wiki/Circuit_de_Barcel...\n\n\n4\n5\nistanbul\nIstanbul Park\nIstanbul\nTurkey\n40.9517\n29.405\n130\nhttp://en.wikipedia.org/wiki/Istanbul_Park",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla circuits"
    ]
  },
  {
    "objectID": "circuits.html#tabla-results",
    "href": "circuits.html#tabla-results",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla results",
    "text": "Tabla results\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM results\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\nresultid\nraceid\ndriverid\nconstructorid\nnumber\ngrid\nposition\npositiontext\npositionorder\npoints\nlaps\ntime\nmilliseconds\nfastestlap\nrank\nfastestlaptime\nfastestlapspeed\nstatusid\n\n\n\n\n0\n1\n18\n1\n1\n22\n1\n1\n1\n1\n10\n58\n1:34:50.616\n5690616\n39\n2\n1:27.452\n218.300\n1\n\n\n1\n2\n18\n2\n2\n3\n5\n2\n2\n2\n8\n58\n+5.478\n5696094\n41\n3\n1:27.739\n217.586\n1\n\n\n2\n3\n18\n3\n3\n7\n7\n3\n3\n3\n6\n58\n+8.163\n5698779\n41\n5\n1:28.090\n216.719\n1\n\n\n3\n4\n18\n4\n4\n5\n11\n4\n4\n4\n5\n58\n+17.181\n5707797\n58\n7\n1:28.603\n215.464\n1\n\n\n4\n5\n18\n5\n1\n23\n3\n5\n5\n5\n4\n58\n+18.014\n5708630\n43\n1\n1:27.418\n218.385\n1",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla circuits"
    ]
  },
  {
    "objectID": "circuits.html#tabla-drivers",
    "href": "circuits.html#tabla-drivers",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla drivers",
    "text": "Tabla drivers\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM drivers\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\ndriverid\ndriverref\nnumber\ncode\nforename\nsurname\ndob\nnationality\nurl\n\n\n\n\n0\n1\nhamilton\n44.0\nHAM\nLewis\nHamilton\n1985-01-07\nBritish\nhttp://en.wikipedia.org/wiki/Lewis_Hamilton\n\n\n1\n2\nheidfeld\nNaN\nHEI\nNick\nHeidfeld\n1977-05-10\nGerman\nhttp://en.wikipedia.org/wiki/Nick_Heidfeld\n\n\n2\n3\nrosberg\n6.0\nROS\nNico\nRosberg\n1985-06-27\nGerman\nhttp://en.wikipedia.org/wiki/Nico_Rosberg\n\n\n3\n4\nalonso\n14.0\nALO\nFernando\nAlonso\n1981-07-29\nSpanish\nhttp://en.wikipedia.org/wiki/Fernando_Alonso\n\n\n4\n5\nkovalainen\nNaN\nKOV\nHeikki\nKovalainen\n1981-10-19\nFinnish\nhttp://en.wikipedia.org/wiki/Heikki_Kovalainen",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla circuits"
    ]
  },
  {
    "objectID": "circuits.html#tabla-constructors",
    "href": "circuits.html#tabla-constructors",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla constructors",
    "text": "Tabla constructors\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM constructors\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\nconstructorid\nconstructorref\nname\nnationality\nurl\n\n\n\n\n0\n1\nmclaren\nMcLaren\nBritish\nhttp://en.wikipedia.org/wiki/McLaren\n\n\n1\n2\nbmw_sauber\nBMW Sauber\nGerman\nhttp://en.wikipedia.org/wiki/BMW_Sauber\n\n\n2\n3\nwilliams\nWilliams\nBritish\nhttp://en.wikipedia.org/wiki/Williams_Grand_Pr...\n\n\n3\n4\nrenault\nRenault\nFrench\nhttp://en.wikipedia.org/wiki/Renault_in_Formul...\n\n\n4\n5\ntoro_rosso\nToro Rosso\nItalian\nhttp://en.wikipedia.org/wiki/Scuderia_Toro_Rosso",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla circuits"
    ]
  },
  {
    "objectID": "circuits.html#tabla-lap_times",
    "href": "circuits.html#tabla-lap_times",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla lap_times",
    "text": "Tabla lap_times\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM lap_times\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\nraceid\ndriverid\nlap\nposition\ntime\nmilliseconds\n\n\n\n\n0\n841\n20\n1\n1\n1:38.109\n98109\n\n\n1\n841\n20\n2\n1\n1:33.006\n93006\n\n\n2\n841\n20\n3\n1\n1:32.713\n92713\n\n\n3\n841\n20\n4\n1\n1:32.803\n92803\n\n\n4\n841\n20\n5\n1\n1:32.342\n92342",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla circuits"
    ]
  },
  {
    "objectID": "circuits.html#tabla-pit_stops",
    "href": "circuits.html#tabla-pit_stops",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla pit_stops",
    "text": "Tabla pit_stops\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM pit_stops\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\nraceid\ndriverid\nstop\nlap\ntime\nduration\nmilliseconds\n\n\n\n\n0\n841\n153\n1\n1\n17:05:23\n26.898\n26898\n\n\n1\n841\n30\n1\n1\n17:05:52\n25.021\n25021\n\n\n2\n841\n17\n1\n11\n17:20:48\n23.426\n23426\n\n\n3\n841\n4\n1\n12\n17:22:34\n23.251\n23251\n\n\n4\n841\n13\n1\n13\n17:24:10\n23.842\n23842",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla circuits"
    ]
  },
  {
    "objectID": "races.html",
    "href": "races.html",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "",
    "text": "En esta sección, llevaremos a cabo un análisis exploratorio centrado en la tabla races, que abarca los datos de las carreras disputadas desde 1950 hasta 2023. Sin embargo, para llevar a cabo este análisis de manera integral, necesitamos consolidar información proveniente de diversas fuentes. Utilizaremos consultas para unificar los datos de la tabla races con aquellos de las tablas circuits (que contiene información sobre los circuitos donde se celebran las carreras de Fórmula 1), results (que proporciona los resultados de las carreras) y lap_times (los tiempos registrados por vuelta).\nEs fundamental destacar que, para la tabla results nos enfocaremos exclusivamente en los datos del ganador de cada carrera. Asimismo, de la tabla lap_time, extraeremos únicamente la información correspondiente a la vuelta más rápida registrada.",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  },
  {
    "objectID": "races.html#tabla-races",
    "href": "races.html#tabla-races",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla races",
    "text": "Tabla races\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM races\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\nraceid\nyear\nround\ncircuitid\nname\ndate\ntime\nurl\nfp1_date\nfp1_time\nfp2_date\nfp2_time\nfp3_date\nfp3_time\nquali_date\nquali_time\nsprint_date\nsprint_time\n\n\n\n\n0\n1\n2009\n1\n1\nAustralian Grand Prix\n2009-03-29\n06:00:00\nhttp://en.wikipedia.org/wiki/2009_Australian_G...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n1\n2\n2009\n2\n2\nMalaysian Grand Prix\n2009-04-05\n09:00:00\nhttp://en.wikipedia.org/wiki/2009_Malaysian_Gr...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n2\n3\n2009\n3\n17\nChinese Grand Prix\n2009-04-19\n07:00:00\nhttp://en.wikipedia.org/wiki/2009_Chinese_Gran...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n3\n4\n2009\n4\n3\nBahrain Grand Prix\n2009-04-26\n12:00:00\nhttp://en.wikipedia.org/wiki/2009_Bahrain_Gran...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n4\n5\n2009\n5\n4\nSpanish Grand Prix\n2009-05-10\n12:00:00\nhttp://en.wikipedia.org/wiki/2009_Spanish_Gran...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  },
  {
    "objectID": "races.html#tabla-circuits",
    "href": "races.html#tabla-circuits",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla circuits",
    "text": "Tabla circuits\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM circuits\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\ncircuitid\ncircuitref\nname\nlocation\ncountry\nlat\nlng\nalt\nurl\n\n\n\n\n0\n1\nalbert_park\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n10\nhttp://en.wikipedia.org/wiki/Melbourne_Grand_P...\n\n\n1\n2\nsepang\nSepang International Circuit\nKuala Lumpur\nMalaysia\n2.76083\n101.738\n18\nhttp://en.wikipedia.org/wiki/Sepang_Internatio...\n\n\n2\n3\nbahrain\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n7\nhttp://en.wikipedia.org/wiki/Bahrain_Internati...\n\n\n3\n4\ncatalunya\nCircuit de Barcelona-Catalunya\nMontmeló\nSpain\n41.57\n2.26111\n109\nhttp://en.wikipedia.org/wiki/Circuit_de_Barcel...\n\n\n4\n5\nistanbul\nIstanbul Park\nIstanbul\nTurkey\n40.9517\n29.405\n130\nhttp://en.wikipedia.org/wiki/Istanbul_Park",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  },
  {
    "objectID": "races.html#tabla-results",
    "href": "races.html#tabla-results",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla results",
    "text": "Tabla results\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM results\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\nresultid\nraceid\ndriverid\nconstructorid\nnumber\ngrid\nposition\npositiontext\npositionorder\npoints\nlaps\ntime\nmilliseconds\nfastestlap\nrank\nfastestlaptime\nfastestlapspeed\nstatusid\n\n\n\n\n0\n1\n18\n1\n1\n22\n1\n1\n1\n1\n10\n58\n1:34:50.616\n5690616\n39\n2\n1:27.452\n218.300\n1\n\n\n1\n2\n18\n2\n2\n3\n5\n2\n2\n2\n8\n58\n+5.478\n5696094\n41\n3\n1:27.739\n217.586\n1\n\n\n2\n3\n18\n3\n3\n7\n7\n3\n3\n3\n6\n58\n+8.163\n5698779\n41\n5\n1:28.090\n216.719\n1\n\n\n3\n4\n18\n4\n4\n5\n11\n4\n4\n4\n5\n58\n+17.181\n5707797\n58\n7\n1:28.603\n215.464\n1\n\n\n4\n5\n18\n5\n1\n23\n3\n5\n5\n5\n4\n58\n+18.014\n5708630\n43\n1\n1:27.418\n218.385\n1",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  },
  {
    "objectID": "races.html#tabla-drivers",
    "href": "races.html#tabla-drivers",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla drivers",
    "text": "Tabla drivers\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM drivers\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\ndriverid\ndriverref\nnumber\ncode\nforename\nsurname\ndob\nnationality\nurl\n\n\n\n\n0\n1\nhamilton\n44.0\nHAM\nLewis\nHamilton\n1985-01-07\nBritish\nhttp://en.wikipedia.org/wiki/Lewis_Hamilton\n\n\n1\n2\nheidfeld\nNaN\nHEI\nNick\nHeidfeld\n1977-05-10\nGerman\nhttp://en.wikipedia.org/wiki/Nick_Heidfeld\n\n\n2\n3\nrosberg\n6.0\nROS\nNico\nRosberg\n1985-06-27\nGerman\nhttp://en.wikipedia.org/wiki/Nico_Rosberg\n\n\n3\n4\nalonso\n14.0\nALO\nFernando\nAlonso\n1981-07-29\nSpanish\nhttp://en.wikipedia.org/wiki/Fernando_Alonso\n\n\n4\n5\nkovalainen\nNaN\nKOV\nHeikki\nKovalainen\n1981-10-19\nFinnish\nhttp://en.wikipedia.org/wiki/Heikki_Kovalainen",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  },
  {
    "objectID": "races.html#tabla-constructors",
    "href": "races.html#tabla-constructors",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla constructors",
    "text": "Tabla constructors\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM constructors\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\nconstructorid\nconstructorref\nname\nnationality\nurl\n\n\n\n\n0\n1\nmclaren\nMcLaren\nBritish\nhttp://en.wikipedia.org/wiki/McLaren\n\n\n1\n2\nbmw_sauber\nBMW Sauber\nGerman\nhttp://en.wikipedia.org/wiki/BMW_Sauber\n\n\n2\n3\nwilliams\nWilliams\nBritish\nhttp://en.wikipedia.org/wiki/Williams_Grand_Pr...\n\n\n3\n4\nrenault\nRenault\nFrench\nhttp://en.wikipedia.org/wiki/Renault_in_Formul...\n\n\n4\n5\ntoro_rosso\nToro Rosso\nItalian\nhttp://en.wikipedia.org/wiki/Scuderia_Toro_Rosso",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  },
  {
    "objectID": "races.html#tabla-lap_times",
    "href": "races.html#tabla-lap_times",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla lap_times",
    "text": "Tabla lap_times\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM lap_times\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\nraceid\ndriverid\nlap\nposition\ntime\nmilliseconds\n\n\n\n\n0\n841\n20\n1\n1\n1:38.109\n98109\n\n\n1\n841\n20\n2\n1\n1:33.006\n93006\n\n\n2\n841\n20\n3\n1\n1:32.713\n92713\n\n\n3\n841\n20\n4\n1\n1:32.803\n92803\n\n\n4\n841\n20\n5\n1\n1:32.342\n92342",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  },
  {
    "objectID": "races.html#tabla-pit_stops",
    "href": "races.html#tabla-pit_stops",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "3.5 Tabla pit_stops",
    "text": "3.5 Tabla pit_stops\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT *\n            FROM pit_stops\n            LIMIT 5;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data)\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\nraceid\ndriverid\nstop\nlap\ntime\nduration\nmilliseconds\n\n\n\n\n0\n841\n153\n1\n1\n17:05:23\n26.898\n26898\n\n\n1\n841\n30\n1\n1\n17:05:52\n25.021\n25021\n\n\n2\n841\n17\n1\n11\n17:20:48\n23.426\n23426\n\n\n3\n841\n4\n1\n12\n17:22:34\n23.251\n23251\n\n\n4\n841\n13\n1\n13\n17:24:10\n23.842\n23842",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  },
  {
    "objectID": "races.html#tabla-final",
    "href": "races.html#tabla-final",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Tabla final",
    "text": "Tabla final\nCon base en las columnas proporcionadas de cada tabla, podemos listar las que se utilizarán en el análisis de la siguiente manera:\n\nRaces: raceId, year, round, circuitId, name, time.\nCircuits: circuit_ref, name, location, country, lat, lng.\nResults: driverId, constructorId, points, grid, laps, milliseconds, fastestlap, rank, fastestlapspeed.\nLap Times: lap, miliseconds.\n\nRealicemos entonces la consulta a la base de datos para obtener esta tabla.\n\ntry:\n    connection = connection_db()\n    cursor = connection.cursor()\n\n    cursor.execute(\n        \"\"\"\n            SELECT r.raceId, r.year, r.round, r.circuitId, r.name AS race_name,\n                c.circuitref, c.name AS circuit_name, c.location AS circuit_location, c.country AS circuit_country,\n                c.lat AS circuit_lat, c.lng AS circuit_lng,\n                re.driverId, re.constructorId, re.points, re.grid, re.laps, re.milliseconds as race_time_in_milliseconds,\n                re.fastestlap AS winner_fastest_lap, re.rank as winner_lap_rank, re.fastestlapspeed as winner_fastestlapspeed,\n                l.lap as general_fastest_lap, l.milliseconds AS general_fastest_lap_time\n            FROM races AS r\n            JOIN circuits AS c ON r.circuitId = c.circuitId\n            JOIN (\n                SELECT raceId, driverId, constructorId, points, grid, laps, milliseconds, fastestlap, rank, fastestlapspeed\n                FROM results\n                WHERE positionOrder = 1\n            ) AS re ON r.raceId = re.raceId\n            LEFT JOIN (\n                SELECT lt.raceId, lt.lap, lt.milliseconds\n                FROM lap_times lt\n                JOIN (\n                    SELECT raceId, MIN(milliseconds) AS min_milliseconds\n                    FROM lap_times\n                    GROUP BY raceId\n                ) AS min_lap_times ON lt.raceId = min_lap_times.raceId AND lt.milliseconds = min_lap_times.min_milliseconds\n            ) AS l ON r.raceId = l.raceId;\n        \"\"\"\n    )\n\n    records = cursor.fetchall()\n    records_data = pd.DataFrame(records)\n\n    columns = []\n    for column in cursor.description:\n        columns.append(column[0])\n\n    records_data.columns = columns\n\n    display(records_data.head())\nexcept (Exception, Error) as e:\n    print('Error while executing the query', e)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n\n\n\n\n\n\n\n\n\nraceid\nyear\nround\ncircuitid\nrace_name\ncircuitref\ncircuit_name\ncircuit_location\ncircuit_country\ncircuit_lat\n...\nconstructorid\npoints\ngrid\nlaps\nrace_time_in_milliseconds\nwinner_fastest_lap\nwinner_lap_rank\nwinner_fastestlapspeed\ngeneral_fastest_lap\ngeneral_fastest_lap_time\n\n\n\n\n0\n18\n2008\n1\n1\nAustralian Grand Prix\nalbert_park\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n...\n1\n10\n1\n58\n5690616\n39.0\n2.0\n218.300\n43.0\n87418.0\n\n\n1\n19\n2008\n2\n2\nMalaysian Grand Prix\nsepang\nSepang International Circuit\nKuala Lumpur\nMalaysia\n2.76083\n...\n6\n10\n2\n56\n5478555\n37.0\n2.0\n209.158\n55.0\n95366.0\n\n\n2\n20\n2008\n3\n3\nBahrain Grand Prix\nbahrain\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n...\n6\n10\n2\n57\n5466970\n38.0\n3.0\n208.153\n49.0\n93193.0\n\n\n3\n21\n2008\n4\n4\nSpanish Grand Prix\ncatalunya\nCircuit de Barcelona-Catalunya\nMontmeló\nSpain\n41.57\n...\n6\n10\n1\n66\n5899051\n46.0\n1.0\n205.191\n46.0\n81670.0\n\n\n4\n22\n2008\n5\n5\nTurkish Grand Prix\nistanbul\nIstanbul Park\nIstanbul\nTurkey\n40.9517\n...\n6\n10\n1\n58\n5209451\n16.0\n3.0\n221.734\n20.0\n86506.0\n\n\n\n\n5 rows × 22 columns\n\n\n\n\nNotemos que las columnas relacionadas a la tabla pit_stops estarán vacíos los datos hasta que estemos viendo los raceId &gt; 841 ya que no hay registros para las anteriores carreras en la base de datos.",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  },
  {
    "objectID": "races.html#conociendo-los-datos",
    "href": "races.html#conociendo-los-datos",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Conociendo los datos",
    "text": "Conociendo los datos\nConocer los datos es un paso fundamental en cualquier análisis. Proporciona una comprensión inicial del problema, permite validar la calidad de los datos, seleccionar características relevantes, preparar los datos adecuadamente y generar ideas y hipótesis. En resumen, la exploración inicial de los datos sienta las bases para un análisis más profundo y asegura que los resultados sean significativos y confiables.\n\nTipos de datos\nPara realizar un análisis exploratorio, primero debes conocer el tipo de variables con las que estamos tratando. Conocer si tenemos variables numéricas o categóricas podrían determinar el rumbo del análisis que realizaremos.\n\nrecords_data.dtypes\n\nraceid                         int64\nyear                           int64\nround                          int64\ncircuitid                      int64\nrace_name                     object\ncircuitref                    object\ncircuit_name                  object\ncircuit_location              object\ncircuit_country               object\ncircuit_lat                   object\ncircuit_lng                   object\ndriverid                       int64\nconstructorid                  int64\npoints                         int64\ngrid                           int64\nlaps                           int64\nrace_time_in_milliseconds      int64\nwinner_fastest_lap           float64\nwinner_lap_rank              float64\nwinner_fastestlapspeed        object\ngeneral_fastest_lap          float64\ngeneral_fastest_lap_time     float64\ndtype: object\n\n\nObservemos que todas las variables tienen el tipo de dato correcto, excepto la columna winner_fastestlapspeed, que toma valores numéricos pero está siendo interpretada como un dato tipo object. Por lo tanto, es necesario convertir esta columna en tipo numérico. Además, vamos a cambiar los tipos de datos de las variables raceid, round, circuitid, driverid y constructorid a tipo object.\n\nrecords_data['winner_fastestlapspeed'] = pd.to_numeric(records_data['winner_fastestlapspeed'])\nrecords_data[['raceid', 'round', 'circuitid', 'driverid', 'constructorid']] = records_data[['raceid', 'round', 'circuitid', 'driverid', 'constructorid']].astype('object')\n\nrecords_data.dtypes\n\nraceid                        object\nyear                           int64\nround                         object\ncircuitid                     object\nrace_name                     object\ncircuitref                    object\ncircuit_name                  object\ncircuit_location              object\ncircuit_country               object\ncircuit_lat                   object\ncircuit_lng                   object\ndriverid                      object\nconstructorid                 object\npoints                         int64\ngrid                           int64\nlaps                           int64\nrace_time_in_milliseconds      int64\nwinner_fastest_lap           float64\nwinner_lap_rank              float64\nwinner_fastestlapspeed       float64\ngeneral_fastest_lap          float64\ngeneral_fastest_lap_time     float64\ndtype: object\n\n\n\n\nDimensiones de los registros\nDeterminar el tamaño de nuestros registros es fundamental, ya que nos permite comprender la magnitud de la información que estamos manejando. Esto a su vez nos ayuda a establecer posibles caminos a seguir en caso de realizar transformaciones y análisis adicionales.\n\nrecords_data.shape\n\n(1094, 22)\n\n\nEsto indica que desde el año 1950 hasta el 2023 se llevaron a cabo más de 1000 carreras, lo que significa que estamos trabajando con una cantidad considerable de datos sobre carreras.\n\n\nDatos faltantes\nDeterminar la presencia de datos faltantes es crucial, ya que puede indicar si podemos confiar en una columna para el análisis o si necesitamos tomar medidas para imputar esos valores ausentes.\n\nrecords_data.isnull().sum()\n\nraceid                         0\nyear                           0\nround                          0\ncircuitid                      0\nrace_name                      0\ncircuitref                     0\ncircuit_name                   0\ncircuit_location               0\ncircuit_country                0\ncircuit_lat                    0\ncircuit_lng                    0\ndriverid                       0\nconstructorid                  0\npoints                         0\ngrid                           0\nlaps                           0\nrace_time_in_milliseconds      0\nwinner_fastest_lap           717\nwinner_lap_rank              716\nwinner_fastestlapspeed       717\ngeneral_fastest_lap          584\ngeneral_fastest_lap_time     584\ndtype: int64\n\n\nCon los resultados obtenidos, observamos que tenemos una cantidad significativa de datos faltantes. Esta situación puede afectar los análisis futuros, dependiendo del tipo de variable que estemos considerando. Es importante determinar un método adecuado para la imputación de datos en caso de que sea necesario. Veamos el porcentaje que representa esta cantidad de datos faltantes en el total de nuestros datos.\n\nmissing_values = records_data.isnull().sum()\nmissing_percentage = round((missing_values / len(records_data)) * 100, 4)\nmissing_percentage\n\nraceid                        0.0000\nyear                          0.0000\nround                         0.0000\ncircuitid                     0.0000\nrace_name                     0.0000\ncircuitref                    0.0000\ncircuit_name                  0.0000\ncircuit_location              0.0000\ncircuit_country               0.0000\ncircuit_lat                   0.0000\ncircuit_lng                   0.0000\ndriverid                      0.0000\nconstructorid                 0.0000\npoints                        0.0000\ngrid                          0.0000\nlaps                          0.0000\nrace_time_in_milliseconds     0.0000\nwinner_fastest_lap           65.5393\nwinner_lap_rank              65.4479\nwinner_fastestlapspeed       65.5393\ngeneral_fastest_lap          53.3821\ngeneral_fastest_lap_time     53.3821\ndtype: float64\n\n\nTenemos un gran porcentaje de datos faltantes en nuestras variables. Sin embargo, estos datos faltantes parecen estar concentrados en las variables relacionadas con medidas de tiempos y velocidades. Esto sugiere que estos datos podrían faltar debido a limitaciones técnicas o falta de registro en las fechas más antiguas, donde la toma de estas medidas podría no haber sido sistemática.\nPara comprender mejor la distribución de estos datos faltantes, examinemos en qué fechas están ocurriendo y verifiquemos la fecha máxima y mínima en la que faltan estas observaciones.\n\nrecords_data[records_data.isnull().any(axis = 1)]\n\n\n\n\n\n\n\n\n\nraceid\nyear\nround\ncircuitid\nrace_name\ncircuitref\ncircuit_name\ncircuit_location\ncircuit_country\ncircuit_lat\n...\nconstructorid\npoints\ngrid\nlaps\nrace_time_in_milliseconds\nwinner_fastest_lap\nwinner_lap_rank\nwinner_fastestlapspeed\ngeneral_fastest_lap\ngeneral_fastest_lap_time\n\n\n\n\n90\n108\n2003\n1\n1\nAustralian Grand Prix\nalbert_park\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n...\n1\n10\n11\n58\n5682100\nNaN\nNaN\nNaN\n32.0\n87724.0\n\n\n91\n109\n2003\n2\n2\nMalaysian Grand Prix\nsepang\nSepang International Circuit\nKuala Lumpur\nMalaysia\n2.76083\n...\n1\n10\n7\n56\n5542195\nNaN\nNaN\nNaN\n45.0\n96412.0\n\n\n92\n110\n2003\n3\n18\nBrazilian Grand Prix\ninterlagos\nAutódromo José Carlos Pace\nSão Paulo\nBrazil\n-23.7036\n...\n17\n10\n8\n54\n5478200\nNaN\nNaN\nNaN\n46.0\n82032.0\n\n\n93\n111\n2003\n4\n21\nSan Marino Grand Prix\nimola\nAutodromo Enzo e Dino Ferrari\nImola\nItaly\n44.3439\n...\n6\n10\n1\n62\n5292058\nNaN\nNaN\nNaN\n17.0\n82491.0\n\n\n94\n112\n2003\n5\n4\nSpanish Grand Prix\ncatalunya\nCircuit de Barcelona-Catalunya\nMontmeló\nSpain\n41.57\n...\n6\n10\n1\n65\n5626933\nNaN\nNaN\nNaN\n52.0\n80143.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n819\n828\n1951\n4\n55\nFrench Grand Prix\nreims\nReims-Gueux\nReims\nFrance\n49.2542\n...\n51\n5\n7\n77\n12131000\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n820\n784\n1956\n1\n25\nArgentine Grand Prix\ngalvez\nAutódromo Juan y Oscar Gálvez\nBuenos Aires\nArgentina\n-34.6943\n...\n6\n5\n3\n98\n10803700\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n821\n780\n1957\n5\n58\nBritish Grand Prix\naintree\nAintree\nLiverpool\nUK\n53.4769\n...\n118\n5\n3\n90\n11197800\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n822\n728\n1963\n10\n56\nSouth African Grand Prix\ngeorge\nPrince George Circuit\nEastern Cape Province\nSouth Africa\n-33.0486\n...\n172\n9\n1\n85\n7836900\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1049\n1063\n2021\n12\n13\nBelgian Grand Prix\nspa\nCircuit de Spa-Francorchamps\nSpa\nBelgium\n50.4372\n...\n9\n13\n1\n1\n207071\nNaN\n0.0\nNaN\n1.0\n207071.0\n\n\n\n\n717 rows × 22 columns\n\n\n\n\n\n\nFecha mínima:  1950\nFecha promedio:  1980\nFecha máxima:  2021\n\n\nObservando estos resultados, podemos confirmar nuestra teoría. Estos registros faltantes pueden ser debidos a limitaciones técnicas en aquellos tiempos. Sin embargo, también tenemos datos faltantes recientes. En este caso, podríamos considerar imputar datos a partir de la fecha en que se realizó el primer registro en alguna de estas variables.",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  },
  {
    "objectID": "races.html#exploración-de-los-datos",
    "href": "races.html#exploración-de-los-datos",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Exploración de los datos",
    "text": "Exploración de los datos\nEn esta sección realizaremos el verdadero análisis exploratorio de nuestros datos. Abordaremos los siguientes aspectos:\n\nMedidas de tendencia central: Calcularemos medidas como la media, la mediana y la moda para entender mejor la distribución de nuestros datos.\nLimpieza de los datos: Abordaremos la limpieza de nuestros datos, incluyendo la búsqueda de datos atípicos.\nTransformación: Determinaremos si es necesario aplicar alguna transformación a nuestros datos para facilitar los análisis subsiguientes.\nVisualización: Utilizaremos herramientas gráficas para explorar el comportamiento de nuestros datos y extraer patrones o tendencias.\n\nEsta fase nos permitirá comprender mejor la naturaleza de nuestros datos y prepararlos adecuadamente para análisis más avanzados.\n\nMedidas de tendencia central\n\nrecords_data.describe()\n\n\n\n\n\n\n\n\n\nyear\npoints\ngrid\nlaps\nrace_time_in_milliseconds\nwinner_fastest_lap\nwinner_lap_rank\nwinner_fastestlapspeed\ngeneral_fastest_lap\ngeneral_fastest_lap_time\n\n\n\n\ncount\n1094.000000\n1094.000000\n1094.000000\n1094.000000\n1.094000e+03\n377.000000\n378.000000\n377.000000\n510.000000\n510.000000\n\n\nmean\n1991.635283\n13.200183\n2.710238\n64.812614\n6.390212e+06\n44.297082\n2.695767\n207.944472\n45.986275\n88098.447059\n\n\nstd\n20.236151\n6.952141\n2.657508\n20.397213\n1.657215e+06\n15.989751\n1.935302\n20.773775\n16.101282\n12714.556207\n\n\nmin\n1950.000000\n4.000000\n1.000000\n1.000000\n2.070710e+05\n5.000000\n0.000000\n151.388000\n1.000000\n55404.000000\n\n\n25%\n1976.000000\n9.000000\n1.000000\n54.000000\n5.445916e+06\n36.000000\n1.000000\n197.014000\n36.000000\n78443.000000\n\n\n50%\n1993.000000\n10.000000\n2.000000\n65.000000\n5.905204e+06\n47.000000\n2.000000\n208.314000\n49.000000\n86233.500000\n\n\n75%\n2009.000000\n10.000000\n3.000000\n73.000000\n6.805843e+06\n55.000000\n4.000000\n220.782000\n56.000000\n96421.000000\n\n\nmax\n2023.000000\n50.000000\n22.000000\n200.000000\n1.467954e+07\n78.000000\n14.000000\n257.320000\n80.000000\n207071.000000\n\n\n\n\n\n\n\n\n\nEstos resultados nos pueden permitir concluir lo siguiente:\n\nPuntos, posición en la parrilla y número de vueltas: La distribución de puntos obtenidos, la posición en la parrilla de salida y el número de vueltas varían ampliamente entre las carreras. Esto puede reflejar diferencias en la dificultad de los circuitos, la calidad de los vehículos y la estrategia de los equipos en cada evento específico.\nTiempo de carrera y velocidad: El tiempo medio de carrera es de aproximadamente 106 minutos, pero con una variabilidad significativa. lo que puede ser atribuible a factores como la longitud del circuito, condiciones climáticas y la cantidad de incidentes en la pista. La velocidad media de la vuelta más rápida realizada por el ganador es de alrededor de 207.94 km/h, lo que también puede variar según las características específicas del circuito y la competencia entre los conductores.\n\n\n\nLimpieza de los datos\nLa limpieza de datos es una etapa crucial en cualquier análisis, por lo que en este apartado trataremos los datos faltantes y observaremos si existen datos atípicos en nuestras variables.\n\nDatos faltantes\nExisten diversas estrategias para abordar este problema. Usualmente, en este tipo de análisis se recurre a la imputación de valores faltantes utilizando la media, moda o mediana, o llenando los datos con los valores anteriores o siguientes. Sin embargo, estas técnicas pueden no ser óptimas para conjuntos de datos extensos o con características específicas.\nEn nuestro caso, una estrategia efectiva sería utilizar la imputación de datos faltantes basada en puntos similares en los datos mediante el algoritmo KNN (K-Nearest Neighbors) y Random Forest Classification. Este método considera las características de observaciones similares para estimar los valores faltantes de manera más precisa y realista, lo que resulta especialmente útil en conjuntos de datos complejos como el nuestro.\nInicialmente, creemos un DataFrame temporal donde estarán los mismos datos de records_data pero sin las columnas correspondientes a tipo object.\n\ntemp_df = records_data.select_dtypes(exclude=['object'])\n\nimputer = IterativeImputer(min_value=0, max_iter=30, imputation_order='roman', random_state=1)\nimputed_data = imputer.fit_transform(temp_df)\n\ntemp_df_imputed = pd.DataFrame(imputed_data, columns=temp_df.columns)\ntemp_df_imputed.isnull().sum()\n\nyear                         0\npoints                       0\ngrid                         0\nlaps                         0\nrace_time_in_milliseconds    0\nwinner_fastest_lap           0\nwinner_lap_rank              0\nwinner_fastestlapspeed       0\ngeneral_fastest_lap          0\ngeneral_fastest_lap_time     0\ndtype: int64\n\n\nBien, ya no tenemos datos faltantes. Ahora, verifiquemos si los resultados obtenidos en las medidas de tendencia central del DataFrame original cambiaron significativamente.\n\ntemp_df_imputed.describe()\n\n\n\n\n\n\n\n\n\nyear\npoints\ngrid\nlaps\nrace_time_in_milliseconds\nwinner_fastest_lap\nwinner_lap_rank\nwinner_fastestlapspeed\ngeneral_fastest_lap\ngeneral_fastest_lap_time\n\n\n\n\ncount\n1094.000000\n1094.000000\n1094.000000\n1094.000000\n1.094000e+03\n1094.000000\n1094.000000\n1094.000000\n1094.000000\n1094.000000\n\n\nmean\n1991.635283\n13.200183\n2.710238\n64.812614\n6.390212e+06\n41.198089\n2.388976\n197.487624\n43.406781\n87917.959131\n\n\nstd\n20.236151\n6.952141\n2.657508\n20.397213\n1.657215e+06\n13.042462\n1.212770\n51.466986\n14.678942\n8687.161576\n\n\nmin\n1950.000000\n4.000000\n1.000000\n1.000000\n2.070710e+05\n4.442446\n0.000000\n0.000000\n1.000000\n55404.000000\n\n\n25%\n1976.000000\n9.000000\n1.000000\n54.000000\n5.445916e+06\n34.248065\n2.000000\n170.246741\n34.155086\n86470.178618\n\n\n50%\n1993.000000\n10.000000\n2.000000\n65.000000\n5.905204e+06\n41.206371\n2.220656\n202.165329\n44.429436\n87882.189112\n\n\n75%\n2009.000000\n10.000000\n3.000000\n73.000000\n6.805843e+06\n48.000000\n2.584096\n223.148500\n51.635757\n88294.173027\n\n\nmax\n2023.000000\n50.000000\n22.000000\n200.000000\n1.467954e+07\n97.874592\n14.000000\n368.033143\n96.392282\n207071.000000\n\n\n\n\n\n\n\n\n\nComparando los resultados de las medidas de tendencia central antes y después de la imputación de datos con el algoritmo KNN, observamos algunas diferencias significativas en ciertas variables:\n\nPuntos, posición en la parrilla y número de vueltas: No hubo cambios notables en estas variables, lo que indica que la imputación de datos no tuvo un impacto significativo en su distribución.\nTiempo de carrera y velocidad: La media del tiempo de carrera disminuyó ligeramente después de la imputación de datos, lo que sugiere que los nuevos valores imputados pueden haber afectado este aspecto. Por otro lado, la velocidad media de la vuelta más rápida realizada por el ganador experimentó una disminución significativa en su media y desviación estándar, lo que indica que la imputación de datos pudo haber tenido un impacto más notable en esta variable.\n\nAhora que hemos realizado la imputación de datos, pasemos estos datos a nuestro dataframe original.\n\nrecords_data[temp_df.columns] = temp_df_imputed\nrecords_data.isnull().sum()\n\nraceid                       0\nyear                         0\nround                        0\ncircuitid                    0\nrace_name                    0\ncircuitref                   0\ncircuit_name                 0\ncircuit_location             0\ncircuit_country              0\ncircuit_lat                  0\ncircuit_lng                  0\ndriverid                     0\nconstructorid                0\npoints                       0\ngrid                         0\nlaps                         0\nrace_time_in_milliseconds    0\nwinner_fastest_lap           0\nwinner_lap_rank              0\nwinner_fastestlapspeed       0\ngeneral_fastest_lap          0\ngeneral_fastest_lap_time     0\ndtype: int64\n\n\n\n\nDatos atípicos\nVeamos ahora si existen datos atípicos en nuestro registro. En este caso, utilizaremos el rango intercuartílico (IQR) para identificar los valores atípicos. Si un valor cae por debajo de Q1 - 1.5 * IQR o por encima de Q3 + 1.5 * IQR, se considera un valor atípico.\n\nnumeric_columns = temp_df.columns\n\nfor col in numeric_columns:\n    q1 = records_data[col].quantile(0.25)\n    q3 = records_data[col].quantile(0.75)\n\n    iqr = q3 - q1\n    lower_bound = q1 - 1.5 * iqr\n    upper_bound = q3 + 1.5 * iqr\n    outliers = records_data[(records_data[col] &lt; lower_bound) | (records_data[col] &gt; upper_bound)]\n    n_outliers = len(outliers)\n    print(f'#Outliers in {col} are {n_outliers} and represent a {round(n_outliers/len(records_data) * 100, 4)}% of total records')\n\n#Outliers in year are 0 and represent a 0.0% of total records\n#Outliers in points are 282 and represent a 25.777% of total records\n#Outliers in grid are 84 and represent a 7.6782% of total records\n#Outliers in laps are 47 and represent a 4.2962% of total records\n#Outliers in race_time_in_milliseconds are 94 and represent a 8.5923% of total records\n#Outliers in winner_fastest_lap are 48 and represent a 4.3876% of total records\n#Outliers in winner_lap_rank are 234 and represent a 21.3894% of total records\n#Outliers in winner_fastestlapspeed are 78 and represent a 7.1298% of total records\n#Outliers in general_fastest_lap are 17 and represent a 1.5539% of total records\n#Outliers in general_fastest_lap_time are 412 and represent a 37.66% of total records\n\n\nComo podemos observar, tenemos una cantidad significativa de datos atípicos en algunas de nuestras variables. Esto podría afectar más adelante en los modelos estadísticos que querramos implementar. Veamos gráficamente qué es lo que está ocurriendo con ellos.\nRealizaremos un gráfico de caja y bigotes e histogramas para ver el comportamiento y la distribución de nuestros datos.\n\nplt.figure(figsize=(9,12))\n\ni = 1\nfor col in numeric_columns:\n    plt.subplot(5,3,i)\n    plt.boxplot(records_data[col],whis=1.5)\n    plt.title(col)\n\n    i += 1\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(8,12))\n\ni = 1\nfor col in numeric_columns:\n    plt.subplot(5, 3, i)\n    sns.histplot(records_data[col], kde=True)\n    plt.title(col)\n    i += 1\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nDada la naturaleza de las variables, en algunos casos como rank, lap, grid, points, que son datos numéricos discretos y representan una categoría específica, es normal que existan datos atípicos. Por otro lado, para las otras variables en nuestra base de datos, estos datos atípicos no están afectando mucho la distribución de cada una de ellas, por lo tanto, no realizaremos cambios en ellas.",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  },
  {
    "objectID": "races.html#visualización",
    "href": "races.html#visualización",
    "title": "Campeonato Mundial de la Formula 1 (1950 - 2023)",
    "section": "Visualización",
    "text": "Visualización\nLa visualización es uno de los puntos más importantes a la hora de realizar una exploración de los datos. Con ella, no solo podemos encontrar las relaciones que existen entre nuestras variables, sino que también podemos representar gráficamente las informaciones más relevantes de los datos.\nComencemos visualizando los gráficos de correlación y dispersión entre las variables para comprender mejor sus relaciones y encontrar posibles patrones.\n\nGráfico de correlación\n\ncorr = records_data[numeric_columns].corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nsns.heatmap(corr, annot=True, cmap='PRGn', square=True, center=0, mask=mask)\n\n\n\n\n\n\n\n\nComo podemos observar, las variables con una alta correlación (&gt;0.5 o &lt;-0.5) son aquellas que están relacionadas entre sí, como laps, winner_fastestlapspeed, general_fastest_lap, entre otras. Por lo tanto, esto no debería ser un problema y podemos proseguir con la exploración de los datos.\n\n\nGráfico de dispersión\n\nnumeric_columns = numeric_columns.drop(['points', 'winner_lap_rank'])\n\nplt.figure(figsize=(8, 12))\nsns.pairplot(records_data[numeric_columns])\nplt.show()\n\n&lt;Figure size 768x1152 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\nDe este gráfico podemos notar que a medida que pasan los años, la competencia ha evolucionado en términos de velocidades y tiempos de carreras obtenidos. La velocidad ha aumentado, lo que indica una mejora en los automóviles, y afecta directamente la duración de las carreras. Sin embargo, estos cambios en las velocidades y tiempos de carrera también se han vuelto más dispersos a lo largo de los años, lo que implica que ha habido una gran diferencia entre los equipos constructores. Además, también podemos observar algunas relaciones proporcionales en nuestras variables, como aquellas relacionadas nuevamente con las velocidades y tiempos.\n\n\nDistribución de tiempos de vuelta por décadas\nVeamos cómo se distribuyen en cada una de las vueltas a lo largo de los años.\n\nrecords_data['race_time_in_seconds'] = records_data['race_time_in_milliseconds'] / 1000\nrecords_data['decade'] = records_data['year'].apply(lambda x: int(np.floor(x / 10) * 10))\n\nplt.figure(figsize=(8, 8))\nsns.boxplot(x='decade', y='race_time_in_seconds', data=records_data, palette=\"PRGn\", hue='decade', legend=False)\nplt.title('Distribución de Duración de Carreras por Década')\nplt.xlabel('Década')\nplt.ylabel('Duración de Carreras (segundos)')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nComo se evidenció anteriormente, a medida que avanzan los años, los tiempos de carrera muestran una marcada tendencia a disminuir.",
    "crumbs": [
      "Análisis Exploratorio de Datos (EDA)",
      "Análisis de la tabla races"
    ]
  }
]